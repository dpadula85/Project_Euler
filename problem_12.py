# -*- coding: utf-8 -*-
"""
Created on Sat Mar 14 16:42:45 2015

@author: Daniele
"""

#The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#The first ten terms would be:
#
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?
#
#explanation of the maths at
#http://code.jasonbhill.com/sage/project-euler-problem-12/

import time
from Euler import *

#calculate the nth triangle number
def nth_triangle(n):
    x = n * (n + 1) / 2
    return x

#calculate the numer of divisors of a number
def n_divs(list_factors):
    '''list_factors is a list of tuples.
    The elements of each tuple are:
    tuple[0]: the nth prime factor
    tuple[1]: its exponent'''
    
    num_divs = 1    
    for factor in list_factors:
        num_divs *= (factor[1] + 1)
    
    return num_divs
    

start = time.time()    

n = 1
while True:
    nth_tri = nth_triangle(n)
    factors = factorize(nth_tri)
    nth_tri_divs = n_divs(factors)
    if nth_tri_divs > 500:
        print nth_tri
        break
    n += 1

elapsed = (time.time() - start)

print 'in %5.3f seconds' % elapsed